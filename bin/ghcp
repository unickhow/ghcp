#!/usr/bin/env bash
# ghcp - GitHub PR Cherry Pick Tool
# Standalone executable script that works with any shell

set -euo pipefail

# Colors for better output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Global variables for cleanup
TEMP_FILE=""
ORIGINAL_BRANCH=""
CHERRY_PICK_IN_PROGRESS=false

# Cleanup function
cleanup() {
  if [ -n "$TEMP_FILE" ] && [ -f "$TEMP_FILE" ]; then
		rm -f "$TEMP_FILE"
  fi

  if [ "$CHERRY_PICK_IN_PROGRESS" = true ]; then
		print_warning "Cherry-pick was interrupted. Current state:"
		git status --porcelain
		echo ""
		print_info "To continue: git cherry-pick --continue"
		print_info "To abort: git cherry-pick --abort"
  fi
}

# Signal handlers
trap 'print_warning "\nOperation interrupted by user"; cleanup; exit 130' INT TERM
trap 'cleanup' EXIT

print_usage() {
  echo "Usage: ghcp <PR_NUMBER> [OPTIONS]"
  echo "       ghcp --recover <PR_NUMBER>"
  echo "       ghcp --status"
  echo ""
  echo "Cherry picks all commits from a GitHub Pull Request to the current branch."
  echo ""
  echo "Options:"
  echo "  -n, --dry-run          Show what would be done without executing"
  echo "  -v, --verbose          Enable verbose output"
  echo "  --recover <PR_NUMBER>  Recover from previous failed cherry-pick"
  echo "  --status               Show current cherry-pick status"
  echo "  -h, --help             Show this help message"
  echo ""
  echo "Requirements:"
  echo "  - git"
  echo "  - GitHub CLI (gh)"
  echo "  - jq"
  echo "  - Being in a git repository"
}

handle_recovery() {
  local pr_number="$1"

  if [ ! -f "$HOME/.ghcp_recovery" ]; then
		print_error "No recovery information found"
		exit 1
  fi

  print_info "Loading recovery information..."

  # Source recovery file
  . "$HOME/.ghcp_recovery"

  if [ "$PR_NUMBER" != "$pr_number" ]; then
		print_error "Recovery file is for PR #$PR_NUMBER, but you requested PR #$pr_number"
		exit 1
  fi

  print_info "Recovered state:"
  echo "  - PR: #$PR_NUMBER"
  echo "  - Progress: $SUCCESS_COUNT/$TOTAL_COUNT commits"
  echo "  - Failed at: $FAILED_AT_COMMIT"

  # Check current git state
  if git diff-index --quiet HEAD -- 2>/dev/null; then
		print_warning "No conflicts detected. The previous conflict may have been resolved."
		printf "Continue with remaining commits? [y/N] "
		read -r response
		case "$response" in
				[Yy]|[Yy][Ee][Ss]) ;;
				*) exit 0 ;;
		esac

		# Continue with remaining commits
		if [ -n "$REMAINING_COMMITS" ]; then
			local temp_file
			temp_file=$(mktemp)
			echo "$REMAINING_COMMITS" > "$temp_file"
			cherry_pick_remaining_commits "$temp_file" "$pr_number" "$SUCCESS_COUNT" "$TOTAL_COUNT"
		else
			print_success "All commits have been processed!"
			rm -f "$HOME/.ghcp_recovery"
		fi
  else
		print_warning "Conflicts still exist. Please resolve them first:"
		git status --porcelain
		echo ""
		print_info "After resolving conflicts:"
		echo "  - Continue: git cherry-pick --continue && ghcp --recover $pr_number"
		echo "  - Skip: git cherry-pick --skip && ghcp --recover $pr_number"
		echo "  - Abort: git cherry-pick --abort && rm ~/.ghcp_recovery"
  fi
}

print_error() {
  echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
  echo -e "${GREEN}$1${NC}"
}

print_info() {
  echo -e "${BLUE}$1${NC}"
}

print_warning() {
  echo -e "${YELLOW}$1${NC}"
}

check_requirements() {
  # Check if we're in a git repository
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
		print_error "Current directory is not a git repository"
		exit 1
  fi

  # Check if working directory is clean
  if ! git diff-index --quiet HEAD -- 2>/dev/null; then
		print_warning "Working directory has uncommitted changes"
		printf "Continue anyway? This could lead to conflicts. [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss]) ;;
			*)
				print_info "Operation cancelled. Please commit or stash your changes first."
				exit 0
				;;
		esac
  fi

  # Check if we're on a detached HEAD
  if ! git symbolic-ref HEAD >/dev/null 2>&1; then
		print_error "You are in 'detached HEAD' state. Please checkout a branch first."
		exit 1
  fi

  # Check if GitHub CLI is installed
  if ! command -v gh >/dev/null 2>&1; then
		print_error "GitHub CLI (gh) not found, please install it first"
		echo "Install instructions: https://cli.github.com/"
		exit 1
  fi

  # Check GitHub CLI authentication
  if ! gh auth status >/dev/null 2>&1; then
		print_error "GitHub CLI is not authenticated"
		echo "Please run: gh auth login"
		exit 1
  fi

  # Check if jq is available (required for gh --json)
  if ! command -v jq >/dev/null 2>&1; then
		print_error "jq not found, please install it first"
		echo "jq is required for parsing GitHub CLI JSON output"
		exit 1
  fi
}

get_pr_commits() {
  local pr_number="$1"
  local commits

  print_info "Fetching commits from PR #$pr_number..."

  # Get PR info first to validate it exists and get additional context
  local pr_info
  if ! pr_info=$(gh pr view "$pr_number" --json number,title,headRefName,baseRefName,state,mergeable 2>/dev/null); then
		print_error "Unable to fetch PR #$pr_number"
		echo "Please check:"
		echo "  - PR number is correct"
		echo "  - You have access to the repository" 
		echo "  - You're authenticated with GitHub CLI (run 'gh auth status')"
		exit 1
  fi

  # Check PR state
  local pr_state
  pr_state=$(echo "$pr_info" | jq -r '.state')
  if [ "$pr_state" = "MERGED" ]; then
		print_warning "PR #$pr_number is already merged"
		printf "Continue anyway? [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss]) ;;
			*) exit 0 ;;
		esac
  elif [ "$pr_state" = "CLOSED" ]; then
		print_warning "PR #$pr_number is closed"
		printf "Continue anyway? [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss]) ;;
			*) exit 0 ;;
		esac
  fi

  # Get commits in chronological order (oldest first)
  if ! commits=$(gh pr view "$pr_number" --json commits --jq '.commits | sort_by(.committedDate) | .[].oid' 2>/dev/null); then
		print_error "Unable to fetch commits from PR #$pr_number"
		exit 1
  fi

  if [ -z "$commits" ]; then
		print_error "No commits found in PR #$pr_number"
		exit 1
  fi

  # Check for merge commits and warn user
  local merge_commits
  merge_commits=$(echo "$commits" | while IFS= read -r commit; do
		if [ -n "$commit" ] && [ "$(git rev-list --parents "$commit" 2>/dev/null | head -1 | wc -w)" -gt 2 ]; then
			echo "$commit"
		fi
  done)

  if [ -n "$merge_commits" ]; then
		print_warning "Warning: This PR contains merge commits:"
		echo "$merge_commits" | while IFS= read -r commit; do
			local commit_msg
			commit_msg=$(git log --oneline -1 "$commit" 2>/dev/null || echo "Unable to get commit info")
			echo "  $commit - $commit_msg"
		done
		echo ""
		print_warning "Cherry-picking merge commits may not work as expected."
		printf "Continue anyway? [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss]) ;;
			*) exit 0 ;;
		esac
  fi

  echo "$commits"
}

display_commits() {
  local commits="$1"
  local commit_count
  commit_count=$(echo "$commits" | wc -l | tr -d ' ')

  print_info "Found $commit_count commits to cherry pick:"
  echo ""

  local index=1
  echo "$commits" | while IFS= read -r commit; do
		if [ -n "$commit" ]; then
			local commit_msg
			commit_msg=$(git log --oneline -1 "$commit" 2>/dev/null || echo "Unable to get commit info")
			printf "%2d. %s - %s\n" "$index" "$commit" "$commit_msg"
			index=$((index + 1))
		fi
  done
  echo ""
}

confirm_operation() {
  while true; do
		printf "Continue cherry picking these commits? [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss])
				return 0
				;;
			[Nn]|[Nn][Oo]|"")
				print_info "Operation cancelled"
				exit 0
				;;
			*)
				echo "Please answer yes (y) or no (n)"
				;;
		esac
  done
}

cherry_pick_commits() {
  local commits="$1"
  local pr_number="$2"
  local success_count=0
  local total_count
  total_count=$(echo "$commits" | wc -l | tr -d ' ')

  # Store original branch for potential recovery
  ORIGINAL_BRANCH=$(git branch --show-current)

  print_info "Starting cherry pick for PR #$pr_number commits..."
  echo ""

  # Create temp file for commit list
  TEMP_FILE=$(mktemp)
  echo "$commits" > "$TEMP_FILE"

  # Check for commits that might already exist
  local existing_commits=""
  while IFS= read -r commit; do
		if [ -n "$commit" ]; then
			# Check if this commit or its changes already exist
			if git merge-base --is-ancestor "$commit" HEAD 2>/dev/null; then
				existing_commits="$existing_commits$commit "
			fi
		fi
  done < "$TEMP_FILE"

  if [ -n "$existing_commits" ]; then
		print_warning "Warning: Some commits may already be in current branch:"
		for existing_commit in $existing_commits; do
			local commit_msg
			commit_msg=$(git log --oneline -1 "$existing_commit" 2>/dev/null || echo "Unable to get commit info")
			echo "  $existing_commit - $commit_msg"
		done
		echo ""
		printf "Continue anyway? [y/N] "
		read -r response
		case "$response" in
			[Yy]|[Yy][Ee][Ss]) ;;
			*)
				cleanup
				exit 0
				;;
		esac
  fi

  local index=1
  while IFS= read -r commit; do
		if [ -n "$commit" ]; then
			printf "[%d/%d] Cherry picking commit: %s\n" "$index" "$total_count" "$commit"

			CHERRY_PICK_IN_PROGRESS=true
			if git cherry-pick "$commit"; then
				CHERRY_PICK_IN_PROGRESS=false
				print_success "✓ Successfully cherry picked commit: $commit"
				success_count=$((success_count + 1))
			else
				print_error "✗ Cherry pick failed for commit: $commit"
				echo ""
				print_warning "Conflict detected. You have several options:"
				echo "  1. Resolve conflicts manually, then run: git cherry-pick --continue"
				echo "  2. Skip this commit: git cherry-pick --skip"
				echo "  3. Abort entire operation: git cherry-pick --abort"
				echo "  4. Use this tool's recovery: ghcp --recover $pr_number"
				echo ""
				print_info "After resolving, you can manually continue with remaining commits"
				print_info "or re-run: ghcp $pr_number"

				# Save current progress
				echo "FAILED_AT_COMMIT=$commit" > "$HOME/.ghcp_recovery"
				echo "PR_NUMBER=$pr_number" >> "$HOME/.ghcp_recovery"
				echo "SUCCESS_COUNT=$success_count" >> "$HOME/.ghcp_recovery"
				echo "TOTAL_COUNT=$total_count" >> "$HOME/.ghcp_recovery"
				echo "REMAINING_COMMITS<<EOF" >> "$HOME/.ghcp_recovery"
				tail -n +$((index + 1)) "$TEMP_FILE" >> "$HOME/.ghcp_recovery"
				echo "EOF" >> "$HOME/.ghcp_recovery"

				exit 1
			fi
			index=$((index + 1))
		fi
  done < "$TEMP_FILE"

  # Clean up recovery file on success
  rm -f "$HOME/.ghcp_recovery"

  echo ""
  print_success "🎉 Successfully cherry picked all $total_count commits from PR #$pr_number!"

  # Offer to show the changes
  printf "Show summary of cherry-picked commits? [y/N] "
  read -r response
  case "$response" in
		[Yy]|[Yy][Ee][Ss])
			echo ""
			print_info "Summary of cherry-picked commits:"
			git log --oneline "HEAD~$success_count"..HEAD
			;;
  esac
}

cherry_pick_remaining_commits() {
  local temp_file="$1"
  local pr_number="$2"
  local success_count="$3"
  local total_count="$4"

  print_info "Continuing cherry-pick from where we left off..."

  local index=$((success_count + 1))
  while IFS= read -r commit; do
		if [ -n "$commit" ]; then
			printf "[%d/%d] Cherry picking commit: %s\n" "$index" "$total_count" "$commit"

			CHERRY_PICK_IN_PROGRESS=true
			if git cherry-pick "$commit"; then
				CHERRY_PICK_IN_PROGRESS=false
				print_success "✓ Successfully cherry picked commit: $commit"
				success_count=$((success_count + 1))
			else
				print_error "✗ Cherry pick failed for commit: $commit"
				# Update recovery file with new state
				echo "FAILED_AT_COMMIT=$commit" > "$HOME/.ghcp_recovery"
				echo "PR_NUMBER=$pr_number" >> "$HOME/.ghcp_recovery"
				echo "SUCCESS_COUNT=$success_count" >> "$HOME/.ghcp_recovery"
				echo "TOTAL_COUNT=$total_count" >> "$HOME/.ghcp_recovery"
				echo "REMAINING_COMMITS<<EOF" >> "$HOME/.ghcp_recovery"
				tail -n +$((index - success_count + 1)) "$temp_file" >> "$HOME/.ghcp_recovery"
				echo "EOF" >> "$HOME/.ghcp_recovery"
				exit 1
			fi
			index=$((index + 1))
		fi
  done < "$temp_file"

  # Clean up on success
  rm -f "$HOME/.ghcp_recovery"
  rm -f "$temp_file"

  print_success "🎉 Successfully completed cherry-pick! Total: $success_count commits"
}
  local pr_number=""
  local dry_run=false
  local verbose=false
  local recovery_mode=false

  # Parse arguments
  while [[ $# -gt 0 ]]; do
		case $1 in
			-h|--help)
				print_usage
				exit 0
				;;
			-n|--dry-run)
				dry_run=true
				shift
				;;
			-v|--verbose)
				verbose=true
				shift
				;;
			--recover)
				recovery_mode=true
				shift
				if [[ $# -gt 0 ]] && [[ $1 =~ ^[0-9]+$ ]]; then
					pr_number="$1"
					shift
				else
					print_error "Recovery mode requires a PR number"
					exit 1
				fi
				;;
			--status)
				if [ -f "$HOME/.ghcp_recovery" ]; then
					print_info "Recovery information found:"
					. "$HOME/.ghcp_recovery"
					echo "  - PR: #$PR_NUMBER"
					echo "  - Progress: $SUCCESS_COUNT/$TOTAL_COUNT commits"
					echo "  - Failed at: $FAILED_AT_COMMIT"
					echo ""
					print_info "Use 'ghcp --recover $PR_NUMBER' to continue"
				else
					print_info "No recovery information found"
				fi
				exit 0
				;;
			--)
				shift
				break
				;;
			-*)
				print_error "Unknown option: $1"
				print_usage
				exit 1
				;;
			*)
				if [[ $1 =~ ^[0-9]+$ ]]; then
					pr_number="$1"
				else
					print_error "Invalid PR number: $1"
					exit 1
				fi
				shift
				;;
		esac
  done

  # Handle recovery mode
  if [ "$recovery_mode" = true ]; then
		handle_recovery "$pr_number"
		exit 0
  fi

  # Check if PR number was provided
  if [ -z "$pr_number" ]; then
		print_error "PR number is required"
		print_usage
		exit 1
  fi

  # Enable verbose mode if requested
  if [ "$verbose" = true ]; then
		set -x
  fi

  # Check all requirements
  check_requirements

  # Get and display commits
  local commits
  commits=$(get_pr_commits "$pr_number")
  display_commits "$commits"

  # Dry run mode
  if [ "$dry_run" = true ]; then
		print_info "🔍 DRY RUN MODE - No changes will be made"
		local commit_count
		commit_count=$(echo "$commits" | wc -l | tr -d ' ')
		print_success "✅ All checks passed. Ready to cherry-pick $commit_count commits"
		echo ""
		print_info "To execute for real, run: ghcp $pr_number"
		exit 0
  fi

  # Confirm operation
  confirm_operation

  # Execute cherry pick
  cherry_pick_commits "$commits" "$pr_number"
}

# Run main function with all arguments
main "$@"
